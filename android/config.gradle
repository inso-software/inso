ext {
    androidConfig = [
            applicationId    : 'com.inso.watch',
            appName          : 'inso',
            compileSdkVersion: 27,
            minSdkVersion    : 14,
            targetSdkVersion : 27,
            versionCode      : 1,
            versionName      : '1.0.0'// E.g. 1.9.72 => 1,009,072
    ]

    versionConfig = [
            // plugin
            gradle    : '3.2.1',
            // lib
            support   : '27.1.1',
            constraint: '1.1.3',
            leakcanary: '1.5.4',
            butterknife:'9.0.0-rc1'
    ]

    depConfig = [
            gradle              : "com.android.tools.build:gradle:$versionConfig.gradle",
            butterknife_gradle  : "com.jakewharton:butterknife-gradle-plugin:$versionConfig.butterknife",
            kotlin_gradle_plugin: "org.jetbrains.kotlin:kotlin-gradle-plugin:$versionConfig.kotlin",

            support             : [
                    appcompat_v7: "com.android.support:appcompat-v7:$versionConfig.support",
                    design      : "com.android.support:design:$versionConfig.support",
            ],
            constraint          : "com.android.support.constraint:constraint-layout:$versionConfig.constraint",
            leakcanary          : [
                    android      : "com.squareup.leakcanary:leakcanary-android:$versionConfig.leakcanary",
                    android_no_op: "com.squareup.leakcanary:leakcanary-android-no-op:$versionConfig.leakcanary",
            ],
            xiaomi_auth              : "com.xiaomi.account:oauth-android:latest.release",
            butterknife: "com.jakewharton:butterknife:$versionConfig.butterknife",
            butterknife_annotationProcessor :"com.jakewharton:butterknife-compiler:$versionConfig.butterknife",
            reactnative : "com.facebook.react:react-native:+"
    ]

    configAndroidDomain = this.&configAndroidDomain
    configApkName = this.&configApkName
    configSigning = this.&configSigning
    configAppDependencies = this.&configAppDependencies
    configCommonLibDependencies = this.&configCommonLibDependencies
    configPhoneLibDependencies = this.&configPhoneLibDependencies
    config3rdLibDependencies = this.&config3rdLibDependencies
}

def configAndroidDomain(Project pro) {
    if (pro.plugins.hasPlugin("com.android.application")) {
        configAppAndroidDomain(pro)
    } else {
        configLibAndroidDomain(pro)
    }
}


def configSigning(Project pro) {
    File signPropertiesFile = file('sign/keystore.properties')
    if (!signPropertiesFile.exists()) return
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
}

def configApkName(Project pro) {
    pro.android.applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apk")
            variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = "inso_" + variant.versionName.replace(".", "_") + ".apk"
            }
        }
    }
}

//todo:common app is okï¼Œrn is special. Not used.
def configAppAndroidDomain(Project pro) {
    configSigning(pro)
    configApkName(pro)
    pro.android {
        compileSdkVersion androidConfig.compileSdkVersion
        defaultConfig {
            applicationId androidConfig.applicationId
            minSdkVersion androidConfig.minSdkVersion
            targetSdkVersion androidConfig.targetSdkVersion
            versionCode androidConfig.versionCode
            versionName androidConfig.versionName
        }

        buildTypes {
            release {
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        sourceSets {
            main.res.srcDirs += 'src/main/res_core'
            main.res.srcDirs += 'src/main/res_sub'
        }

        lintOptions {
            abortOnError false
        }
    }
}


def configLibAndroidDomain(Project pro) {
    pro.android {
        apply plugin: 'com.jakewharton.butterknife'
        compileSdkVersion androidConfig.compileSdkVersion
        defaultConfig {
            minSdkVersion androidConfig.minSdkVersion
            versionCode androidConfig.versionCode
            versionName androidConfig.versionName
        }
        buildTypes {
            release {
                minifyEnabled false
                consumerProguardFiles 'proguard-rules.pro'
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        lintOptions {
            abortOnError false
        }

        testOptions.unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
}

def configAppDependencies(Project pro) {
    pro.dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'app/libs')
        implementation project(':commonlib')
        implementation project(':phonelib')
        implementation project(':3rdlib')
        implementation depConfig.support.appcompat_v7
        implementation depConfig.support.design
        implementation depConfig.support.design
        implementation depConfig.constraint
        implementation depConfig.xiaomi_auth
        debugImplementation depConfig.leakcanary.android
        releaseImplementation depConfig.leakcanary.android_no_op
        implementation depConfig.butterknife
        annotationProcessor depConfig.butterknife_annotationProcessor
        implementation depConfig.reactnative
    }
}

def configCommonLibDependencies(Project pro) {
    pro.dependencies {
        compileOnly depConfig.support.appcompat_v7
        compileOnly depConfig.support.design
    }
}

def config3rdLibDependencies(Project pro) {
    pro.dependencies {
        compileOnly depConfig.support.appcompat_v7
        compileOnly depConfig.support.design
        implementation project(':commonlib')
    }
}

def configPhoneLibDependencies(Project pro) {
    pro.dependencies {
        implementation project(':commonlib')
        compileOnly depConfig.support.appcompat_v7
        compileOnly depConfig.support.design
//        compileOnly depConfig.support.appcompat_v7
//        compileOnly depConfig.support.design
//        api depConfig.gson
//        api(depConfig.glide) {
//            exclude group: "com.android.support"
//        }
//        api depConfig.retrofit
//
//        testImplementation depConfig.junit
//        testImplementation depConfig.robolectric
    }
}